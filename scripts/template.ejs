<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Offline Function Calling Leaderboard</title>

  <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
  <style type="text/tailwindcss">@custom-variant dark (&:where(.dark, .dark *));</style>

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>

  <style>
    body {
      font-family: 'Inter', sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    .score-bar {
      background: linear-gradient(90deg, #ef4444 0%, #f59e0b 50%, #10b981 100%);
      height: 4px;
      border-radius: 2px;
    }

    .rank-1 {
      background: #fbbf24;
      color: #92400e;
    }

    .rank-2 {
      background: #9ca3af;
      color: #374151;
    }

    .rank-3 {
      background: #fb923c;
      color: #9a3412;
    }

    .table-row:hover {
      background-color: #f8fafc;
    }

    @media (prefers-color-scheme: dark) {
      .table-row:hover {
        background-color: rgba(255, 255, 255, 0.05);
      }
    }

    .modal-backdrop {
      background: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(4px);
    }

    #details-modal {
      margin-top: 0px;
    }

    .status-pass {
      background: #dcfce7;
      color: #166534;
      border: 1px solid #bbf7d0;
    }

    .status-fail {
      background: #fef2f2;
      color: #dc2626;
      border: 1px solid #fecaca;
    }

    .status-error {
      background: #fefce8;
      color: #ca8a04;
      border: 1px solid #fef08a;
    }

    @media (prefers-color-scheme: dark) {
      .status-pass {
        background: rgba(16, 185, 129, 0.1);
        color: #10b981;
        border: 1px solid rgba(16, 185, 129, 0.2);
      }

      .status-fail {
        background: rgba(239, 68, 68, 0.1);
        color: #ef4444;
        border: 1px solid rgba(239, 68, 68, 0.2);
      }

      .status-error {
        background: rgba(234, 179, 8, 0.1);
        color: #eab308;
        border: 1px solid rgba(234, 179, 8, 0.2);
      }
    }

    .animate-fade-in {
      animation: fadeIn 0.6s ease-out;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @media (prefers-color-scheme: dark) {
      ::-webkit-scrollbar {
        width: 6px;
        height: 6px;
      }

      ::-webkit-scrollbar-track {
        background: #000;
      }

      ::-webkit-scrollbar-thumb {
        background: #333;
        border-radius: 3px;
      }

      ::-webkit-scrollbar-thumb:hover {
        background: #555;
      }
    }
  </style>
</head>
<body class="bg-white dark:bg-black text-gray-900 dark:text-white min-h-screen">
  <!-- Main Container -->
  <div class="max-w-6xl mx-auto px-6 py-16">
    <!-- Header -->
    <div class="text-center mb-16">
      <div class="flex items-center justify-center gap-4 mb-6">
        <h1 class="text-5xl md:text-6xl font-black text-gray-900 dark:text-white">
          Offline Function Calling Leaderboard
        </h1>
      </div>
      <p class="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto leading-relaxed">
        A comprehensive evaluation of offline, multimodal, large language models' function calling capabilities across various scenarios.
      </p>
      <div class="flex flex-col sm:flex-row items-center justify-center gap-6 mt-8 text-sm text-gray-500 dark:text-gray-400">
        <div class="flex items-center gap-2">
          <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
          <span>Evaluation ID: <code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs"><%= evalId %></code></span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
          <span>Generated: <span><%= new Date(timestamp).toLocaleString() %></span></span>
        </div>
      </div>
    </div>

    <!-- Stats -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-8 mb-16">
      <div class="text-center">
        <div class="text-3xl font-bold text-gray-900 dark:text-white mb-1"><%= stats.providerCount %></div>
        <div class="text-sm text-gray-500 dark:text-gray-400">Models</div>
      </div>
      <div class="text-center">
        <div class="text-3xl font-bold text-gray-900 dark:text-white mb-1"><%= stats.scenarioCount %></div>
        <div class="text-sm text-gray-500 dark:text-gray-400">Scenarios</div>
      </div>
      <div class="text-center">
        <div class="text-3xl font-bold text-gray-900 dark:text-white mb-1"><%= stats.uniqueParametersCount %></div>
        <div class="text-sm text-gray-500 dark:text-gray-400">Parameters</div>
      </div>
      <div class="text-center">
        <div class="text-3xl font-bold text-gray-900 dark:text-white mb-1"><%= stats.totalTests %></div>
        <div class="text-sm text-gray-500 dark:text-gray-400">Total Tests</div>
      </div>
    </div>

    <!-- Leaderboard -->
    <div class="bg-white dark:bg-black overflow-hidden shadow-sm">
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50 dark:bg-black border-b border-gray-200 dark:border-gray-700">
            <tr>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">Rank</th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">Model</th>
              <th class="px-6 py-4 text-center text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase">Scenario Score</th>
              <th class="px-6 py-4 text-center text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase">Parameter Score</th>
              <th class="px-6 py-4 text-center text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase">Average Latency <sup>^</sup></th>
              <th class="px-6 py-4 text-center text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase">Composite Score <sup>*</sup></th>
              <th class="px-6 py-4 text-center text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase">Details</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
            <%
              const getScoreColor = (score) => {
                if (score >= 0.8) return '#10b981'
                if (score >= 0.5) return '#f59e0b'
                return '#ef4444'
              }

              const formatProviderName = (model) => {
                const id = model.replace('ollama:chat:', '')
                const regex = /^(gemma3n?):([e\d]+b)(-it)?(?:-(.*))?$/
                const match = id.match(regex)

                if (!match) {
                  return `<span class="font-mono text-sm text-gray-500">${id}</span>`
                }

                const [, base, size, instruct, quant] = match
                const baseNameHtml = `<span class="font-semibold text-gray-800 dark:text-gray-100">${base.replace('gemma3n', 'Gemma 3n').replace('gemma3', 'Gemma 3')}</span>`
                const sizeHtml = `<span class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 dark:bg-gray-900 dark:text-gray-300 dark:ring-gray-500/20">${size.toUpperCase()}</span>`
                const detailsHtml = []

                if (instruct) {
                  detailsHtml.push(
                    `<span class="inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10 dark:bg-blue-900/50 dark:text-blue-300 dark:ring-blue-700/30">Instr. Tuned</span>`
                  )
                }

                if (quant) {
                  let quantText
                  if (quant === 'qat') quantText = 'QAT'
                  else if (quant === 'fp16') quantText = 'FP16'
                  else if (quant.startsWith('q')) quantText = `${quant.toUpperCase()}`
                  else quantText = quant.toUpperCase()

                  detailsHtml.push(
                    `<span class="inline-flex items-center rounded-md bg-green-50 px-2 py-1 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20 dark:bg-green-900/50 dark:text-green-300 dark:ring-green-600/40">${quantText}</span>`
                  )
                }

                return `
                  <div class="flex items-center gap-x-2">
                    ${baseNameHtml}
                    ${sizeHtml}
                    ${detailsHtml.join('\n      ')}
                  </div>
                `
              }
            %>
            <% sortedProviders.forEach((p, index) => { %>
              <%
                const rank = index + 1
                let rankClass = 'bg-gray-200 text-gray-600 dark:bg-gray-800 dark:text-gray-400'
                if (rank === 1) rankClass = 'rank-1'
                else if (rank === 2) rankClass = 'rank-2'
                else if (rank === 3) rankClass = 'rank-3'
                const compositeScore = p.compositeScore || 0
                const paramScore = p.parameterScore || 0
              %>
              <tr class="table-row transition-colors">
                <td class="px-6 py-4 text-center">
                  <div class="flex items-center justify-center w-8 h-8 rounded-full font-bold text-sm <%= rankClass %>">
                    <%= rank %>
                  </div>
                </td>
                <td class="px-6 py-4">
                  <%- formatProviderName(p.provider) %>
                </td>
                <td class="px-6 py-4 text-center">
                  <span class="text-sm font-semibold" style="color: <%= getScoreColor(p.scenarioScore) %>;"><%= formatNum(p.scenarioScore || 0, 2) %></span>
                </td>
                <td class="px-6 py-4 text-center">
                  <span class="text-sm font-semibold" style="color: <%= getScoreColor(paramScore) %>;"><%= formatNum(paramScore, 2) %></span>
                </td>
                <td class="px-6 py-4 text-center">
                  <div class="font-mono text-sm text-gray-900 dark:text-gray-300"><%= formatNum(p.avgLatency / 1000, 4, 2) %> sec</div>
                </td>
                <td class="px-6 py-4">
                  <div class="flex items-center justify-center gap-2">
                    <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                      <div class="h-2.5 rounded-full"
                           style="width: <%= compositeScore * 100 %>%; background-color: <%= getScoreColor(compositeScore) %>;">
                      </div>
                    </div>
                    <span class="text-sm font-semibold w-10 text-right"><%= formatNum(compositeScore, 2) %></span>
                  </div>
                </td>
                <td class="px-6 py-4 text-center">
                  <button onclick="showDetails('<%= p.provider %>')" class="p-2 bg-gray-200 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 hover:cursor-pointer">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-bar-chart-2 h-5 w-5 text-gray-600">
                      <line x1="18" y1="20" x2="18" y2="10"></line>
                      <line x1="12" y1="20" x2="12" y2="4"></line>
                      <line x1="6" y1="20" x2="6" y2="14"></line>
                    </svg>
                  </button>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    </div>

    <footer class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700 text-center">
      <div class="max-w-3xl mx-auto space-y-4 text-xs/5 text-gray-500 dark:text-gray-400">
          <span><strong><sup>*</sup>Composite Score</strong>: A weighted score between 0 and 1 that factors in multiple aspects of a model's performance in the tests. It is calculated as follows: <span class="font-mono text-xs">(pass rate × 0.48) + (parameter score × 0.48) + (latency score × 0.04)</span>. Each component is normalized before averaging.</span>
          <p></p>
          <span><strong><sup>^</sup>Average Latency</strong>: These tests were run using Ollama on an Apple Mac Mini with 24G of RAM and an M4 Pro chip. The latency includes the time taken by Ollama to load the model into memory, and the time taken to make the (REST) API call.</span>
      </div>
    </footer>
  </div>

  <!-- Modal -->
  <div id="details-modal" class="fixed inset-0 modal-backdrop flex items-center justify-center p-4 z-50 hidden">
    <div class="bg-white dark:bg-black rounded-2xl shadow-xl w-full max-w-6xl max-h-full flex flex-col border border-gray-200 dark:border-gray-700">
      <header class="px-6 py-4 flex justify-between items-center flex-shrink-0">
        <span id="modal-title" class="text-2xl font-bold text-gray-900 dark:text-white"></span>
        <button onclick="hideDetails()" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-900 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </header>
      <div id="modal-body" class="p-6 overflow-y-auto flex-1 space-y-6">
        <!-- Test case details will be injected here -->
      </div>
    </div>
  </div>

  <script>
    const providersData = <%- JSON.stringify(sortedProviders) %>;
    const testCasesByProvider = <%- JSON.stringify(providerTestCases) %>;
    const providerParamScores = <%- JSON.stringify(providerParamScores) %>;

    let tooltipEl
    document.addEventListener('DOMContentLoaded', () => {
      tooltipEl = document.createElement('div')
      tooltipEl.id = 'param-tooltip'
      tooltipEl.className = 'hidden absolute z-50 px-3 py-1.5 text-sm font-medium text-white bg-gray-900 rounded-lg shadow-sm dark:bg-gray-700 pointer-events-none'
      document.body.appendChild(tooltipEl)
    })

    function escapeRawHtml(unsafe) {
      if (typeof unsafe !== 'string') return ''
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#39;")
    }

    function formatFunctionCall(call) {
      if (!call) return '<em class="text-gray-500">None</em>'
      return `<div class="space-y-3">
        <div><strong class="text-gray-700 dark:text-gray-300">Function:</strong> <code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono">${escapeRawHtml(call.function)}</code></div>
        <div><strong class="text-gray-700 dark:text-gray-300">Parameters:</strong></div>
        <pre class="bg-gray-50 dark:bg-black rounded-lg"><code class="language-json text-xs">${escapeRawHtml(JSON.stringify(call.parameters, null, 2))}</code></pre>
      </div>`
    }

    function getRawOutputHtml(responseText) {
        if (!responseText) return '<em class="text-gray-500">No output.</em>'
        return `<pre class="bg-gray-50 dark:bg-black rounded-lg min-w-0 whitespace-pre-wrap"><code class="language-markdown text-xs">${escapeRawHtml(responseText)}</code></pre>`
    }

    function getActualFunctionCallHtml(responseText) {
        if (!responseText) return '<em class="text-gray-500">No function calls.</em>'

        const regex = /\`\`\`function_call\n([\s\S]*?)\n\`\`\`/g
        const matches = responseText.matchAll(regex)

        const htmlParts = []
        let hasMatches = false

        for (const match of matches) {
            hasMatches = true
            const jsonString = match[1]
            if (jsonString) {
                try {
                    const parsedJson = JSON.parse(jsonString)
                    htmlParts.push(formatFunctionCall(parsedJson))
                } catch (e) {
                    const errorHtml = `<div class="text-red-600 font-semibold">Error parsing function call JSON:</div>
                        <pre class="bg-gray-50 dark:bg-black rounded-lg mt-2"><code class="language-text text-xs">${escapeRawHtml(jsonString)}</code></pre>`
                    htmlParts.push(errorHtml)
                }
            }
        }

        if (!hasMatches) {
            return '<em class="text-gray-500">No function calls.</em>'
        }

        return htmlParts.join('<hr class="my-4 border-gray-200 dark:border-gray-600">')
    }

    function unslugify(slug) {
      if (!slug) return 'General'
      return slug
        .split('-')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ')
    }

    function getScoreColor(score) {
      if (score >= 0.8) return '#10b981'
      if (score > 0) return '#f59e0b'
      return '#ef4444'
    }

    function formatProviderName(model) {
      const id = model.replace('ollama:chat:', '')
      const regex = /^(gemma3n?):([e\d]+b)(-it)?(?:-(.*))?$/
      const match = id.match(regex)

      if (!match) {
        return `<h2 class="font-mono text-sm text-gray-500">${id}</h2>`
      }

      const [, base, size, instruct, quant] = match
      const baseNameHtml = `<h2 class="font-semibold text-gray-800 dark:text-gray-100">${base.replace('gemma3n', 'Gemma 3n').replace('gemma3', 'Gemma 3')}</h2>`
      const sizeHtml = `<span class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 mb-2 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 dark:bg-gray-900 dark:text-gray-300 dark:ring-gray-500/20">${size.toUpperCase()}</span>`
      const detailsHtml = []

      if (instruct) {
        detailsHtml.push(
          `<span class="inline-flex items-center rounded-md bg-blue-50 px-2 py-1 mb-2 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10 dark:bg-blue-900/50 dark:text-blue-300 dark:ring-blue-700/30">Instr. Tuned</span>`
        )
      }

      if (quant) {
        let quantText
        if (quant === 'qat') quantText = 'QAT'
        else if (quant === 'fp16') quantText = 'FP16'
        else if (quant.startsWith('q')) quantText = `${quant.toUpperCase()}`
        else quantText = quant.toUpperCase()

        detailsHtml.push(
          `<span class="inline-flex items-center rounded-md bg-green-50 px-2 py-1 mb-2 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20 dark:bg-green-900/50 dark:text-green-300 dark:ring-green-600/40">${quantText}</span>`
        )
      }

      return `
        <div class="flex items-center gap-x-2">
          ${baseNameHtml}
          ${sizeHtml}
          ${detailsHtml.join('\n      ')}
        </div>
      `
    }

    function showDetails(providerId) {
      const provider = providersData.find(p => p.provider === providerId);
      const cases = testCasesByProvider[providerId] || []
      const paramScores = providerParamScores[providerId] || {}

      const modal = document.getElementById('details-modal')
      const modalTitle = document.getElementById('modal-title')
      const modalBody = document.getElementById('modal-body')

      if (!provider) {
        modalTitle.textContent = 'Error';
        modalBody.innerHTML = '<p class="text-red-500">Could not find data for this provider.</p>';
        modal.classList.remove('hidden');
        return;
      }

      modalTitle.innerHTML = formatProviderName(provider.provider)
      modalBody.innerHTML = ''

      // Summary Section
      const summarySection = document.createElement('div');
      summarySection.className = 'grid grid-cols-2 md:grid-cols-4 gap-6 p-6 mb-2 bg-gray-50 dark:bg-gray-900/50 rounded-xl border border-gray-200 dark:border-gray-700';
      summarySection.innerHTML = `
        <div class="text-center">
          <div class="text-2xl font-bold">${(provider.scenarioScore || 0).toFixed(2)}</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">Scenario Score</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold">${(provider.parameterScore || 0).toFixed(2)}</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">Parameter Score</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold">${(provider.avgLatency / 1000).toFixed(3)}s</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">Avg. Latency</div>
        </div>
        <div class="text-center">
          <div class="text-xl font-bold">
            <span class="text-green-600 dark:text-green-400">${provider.metrics?.testPassCount || 0} Pass</span> /
            <span class="text-red-600 dark:text-red-400">${provider.metrics?.testFailCount || 0} Fail</span> /
            <span class="text-yellow-600 dark:text-yellow-400">${provider.metrics?.testErrorCount || 0} Error</span>
          </div>
          <div class="text-sm text-gray-500 dark:text-gray-400 mt-1.5">Test Results</div>
        </div>
      `;
      modalBody.appendChild(summarySection)

      // Parameter Scores Section
      const sortedParams = Object.keys(paramScores).sort((a, b) => paramScores[b] - paramScores[a])

      if (sortedParams.length > 0) {
          const paramsSection = document.createElement('div')
          paramsSection.className = 'mb-8'

          const titleEl = document.createElement('h3')
          titleEl.className = 'text-xl font-bold text-gray-800 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2 mb-4'
          titleEl.textContent = 'Scoring on Individual Parameters'
          paramsSection.appendChild(titleEl)

          const gridEl = document.createElement('div')
          gridEl.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4'

          sortedParams.forEach(paramName => {
              const score = paramScores[paramName]

              let trackClasses = 'flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-2.5'
              if (score === 0) {
                trackClasses += ' border-2 border-red-500/60 dark:border-red-400/60'
              }

              const paramEl = document.createElement('div')
              paramEl.className = 'flex items-center gap-3'

              paramEl.innerHTML = `
                  <code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono w-32 truncate text-right">${escapeRawHtml(paramName)}</code>
                  <div class="${trackClasses}">
                      <div class="h-2.5 rounded-full" style="width: ${score * 100}%; background-color: ${getScoreColor(score)}"></div>
                  </div>
                  <span class="text-sm font-semibold w-10 text-left">${score.toFixed(2)}</span>
              `

              paramEl.addEventListener('mouseenter', () => {
                tooltipEl.textContent = paramName
                tooltipEl.classList.remove('hidden')
              })
              paramEl.addEventListener('mouseleave', () => {
                tooltipEl.classList.add('hidden')
              })
              paramEl.addEventListener('mousemove', (e) => {
                tooltipEl.style.left = `${e.pageX + 10}px`
                tooltipEl.style.top = `${e.pageY + 10}px`
              })

              gridEl.appendChild(paramEl)
          })

          paramsSection.appendChild(gridEl)
          modalBody.appendChild(paramsSection)
      }

      // Detailed Test Cases
      if (cases.length === 0) {
        modalBody.innerHTML += '<div class="text-center py-12 text-gray-500">No detailed test cases found for this provider.</div>'
      } else {
        const titleEl = document.createElement('h3')
        titleEl.className = 'text-xl font-bold text-gray-800 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2 mb-4'
        titleEl.textContent = 'Detailed Evaluation of Scenarios'
        modalBody.appendChild(titleEl)

        const groupedCases = cases.reduce((acc, c) => {
          const conversationId = c.testCase?.metadata?.conversationId || 'general'
          if (!acc[conversationId]) {
            acc[conversationId] = []
          }
          acc[conversationId].push(c)
          return acc
        }, {})

        const sortedScenarioKeys = Object.keys(groupedCases).sort()

        sortedScenarioKeys.forEach(scenarioId => {
          const scenarioTitle = unslugify(scenarioId)
          const scenarioCases = groupedCases[scenarioId]
          const scenarioWrapper = document.createElement('div')
          scenarioWrapper.className = 'space-y-4'

          const headerContainer = document.createElement('div')

          const scenarioTitleEl = document.createElement('h4')
          scenarioTitleEl.className = 'text-lg font-semibold text-gray-800 dark:text-gray-200 mb-3'
          scenarioTitleEl.textContent = scenarioTitle
          headerContainer.appendChild(scenarioTitleEl)

          const scenarioParams = new Set()
          scenarioCases.forEach(c => {
            const metadataParams = c.testCase?.metadata?.parameters || []
            metadataParams.forEach(paramArray => paramArray.forEach(param => scenarioParams.add(param)))
          })

          if (scenarioParams.size > 0) {
            const paramsContainer = document.createElement('div')
            paramsContainer.className = 'flex flex-wrap items-center gap-x-2 gap-y-1'

            const paramsTitle = document.createElement('span')
            paramsTitle.className = 'text-xs font-semibold uppercase tracking-wider text-gray-500 dark:text-gray-400'
            paramsTitle.textContent = 'Tests '
            paramsContainer.appendChild(paramsTitle)

            Array.from(scenarioParams).sort().forEach(param => {
                const paramBadge = document.createElement('code')
                paramBadge.className = 'bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded-md text-xs font-mono text-gray-600 dark:text-gray-300'
                paramBadge.textContent = escapeRawHtml(param)
                paramsContainer.appendChild(paramBadge)
            })
            headerContainer.appendChild(paramsContainer)
          }

          scenarioWrapper.appendChild(headerContainer)

          scenarioCases.forEach((c, index) => {
            const success = c.success
            const hasError = !!c.response?.error
            let cardClass = ''
            let statusBadge = ''

            if (hasError) {
              cardClass = 'bg-amber-50 dark:bg-amber-900/20 border-amber-200 dark:border-amber-500/30'
              statusBadge = '<span class="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium status-error">ERROR</span>'
            } else if (success) {
              cardClass = 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-500/30'
              statusBadge = '<span class="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium status-pass">PASS</span>'
            } else {
              cardClass = 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-500/30'
              statusBadge = '<span class="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium status-fail">FAIL</span>'
            }

            const latencyHtml = c.latencyMs ? `<span class="font-mono text-sm text-gray-500 dark:text-gray-400 ml-2">${(c.latencyMs / 1000).toFixed(2)}s</span>` : ''
            const expectedCalls = c.testCase.vars.expected?.calls || []
            let expectedHtml = '<em class="text-gray-500">No function call expected.</em>'
            if (expectedCalls.length > 0) {
              expectedHtml = expectedCalls.map(formatFunctionCall).join('<hr class="my-4 border-gray-200 dark:border-gray-600">')
            }

            const rawOutputHtml = getRawOutputHtml(c.response?.output)
            const actualFunctionCallHtml = getActualFunctionCallHtml(c.response?.output)
            const formattedMessage = escapeRawHtml(c.testCase.vars.message)
            const context = c.testCase?.metadata?.context

            const card = document.createElement('div')
            card.className = `rounded-xl border ${cardClass} p-6`
            card.innerHTML = `
              <div class="flex items-start gap-4">
                <div class="flex-grow space-y-4">
                  <div>
                    <div class="my-2 flex items-center">${statusBadge} ${latencyHtml}</div>
                    ${context ? `<p class="text-md text-gray-600 dark:text-gray-400 mb-3">${escapeRawHtml(context)}</p>` : ''}

                    <div class="my-2 bg-white dark:bg-black p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                      <span class="font-bold text-gray-700 dark:text-gray-300">Prompt</span>
                      <div class="overflow-x-auto">
                        <pre class="bg-gray-50 dark:bg-black rounded-lg min-w-0 whitespace-pre-wrap"><code class="language-markdown text-xs">${formattedMessage}</code></pre>
                      </div>
                    </div>

                    <div class="my-2 bg-white dark:bg-black p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                      <span class="mb-4 font-bold text-gray-700 dark:text-gray-300">Model Response</span>
                      <div class="overflow-x-auto">
                        ${rawOutputHtml}
                      </div>
                    </div>
                  </div>

                  <div class="grid lg:grid-cols-2 gap-4">
                    <div class="flex flex-col space-y-2">
                      <div class="flex-1 bg-white dark:bg-black p-4 rounded-lg border border-gray-200 dark:border-gray-700 text-sm">
                        <h5 class="mb-4 underline font-bold text-gray-700 dark:text-gray-300">Expected Function Call</h5>
                        ${expectedHtml}
                      </div>
                    </div>
                    <div class="flex flex-col space-y-2">
                      <div class="flex-1 bg-white dark:bg-black p-4 rounded-lg border border-gray-200 dark:border-gray-700 text-sm">
                        <h5 class="mb-4 underline font-bold text-gray-700 dark:text-gray-300">Actual Function Call</h5>
                        ${actualFunctionCallHtml}
                      </div>
                    </div>
                  </div>

                  ${!success || hasError ? `
                  <div class="bg-red-50 dark:bg-red-900/20 border ${hasError ? `border-amber-200 dark:border-amber-500/30` : `border-red-200 dark:border-red-500/30`} rounded-lg p-4">
                    <h5 class="font-medium ${hasError ? `text-amber-800 dark:text-amber-400` : `text-red-800 dark:text-red-400`} mb-2">${hasError ? 'Error Message' : 'Failure Reason'}</h5>
                    <p class="text-sm ${hasError ? `text-amber-700 dark:text-amber-300` : `text-red-700 dark:text-red-300`}">${escapeRawHtml(c.error || c.gradingResult?.reason || 'No reason provided.')}</p>
                  </div>` : ''}
                </div>
              </div>
            `
            scenarioWrapper.appendChild(card)
          })
          modalBody.appendChild(scenarioWrapper)
        })
      }

      modal.classList.remove('hidden')
      document.body.style.overflow = 'hidden'
      setTimeout(() => {
        modalBody.scrollTop = 0
        hljs.highlightAll()
      }, 50)
    }

    function hideDetails() {
      const modal = document.getElementById('details-modal')
      modal.classList.add('hidden')
      document.body.style.overflow = ''
    }

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') hideDetails()
    })

    document.getElementById('details-modal').addEventListener('click', (event) => {
      if (event.target === event.currentTarget) hideDetails()
    })

    window.showDetails = showDetails
    window.hideDetails = hideDetails

    const applyTheme = () => {
        const light = document.querySelector('link[href*="github.min.css"]')
        const dark = document.querySelector('link[href*="github-dark.min.css"]')
        if (document.documentElement.classList.contains('dark')) {
            light.disabled = true
            dark.disabled = false
        } else {
            light.disabled = false
            dark.disabled = true
        }
    }

    const observer = new MutationObserver((mutationsList) => {
        for (const mutation of mutationsList) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                applyTheme()
                break
            }
        }
    })

    observer.observe(document.documentElement, { attributes: true })

    document.addEventListener('DOMContentLoaded', () => {
      applyTheme()
      hljs.highlightAll()
    })
  </script>
</body>
</html>
